<template>
  <div class="page" data-name="product">
    <div class="navbar">
      <div class="navbar-bg"></div>
      <div class="navbar-inner sliding" style="display: flex; justify-content: space-between; align-items: center;">
        <div class="title">File Editor</div>
        <div class="right">
          <!-- Plus Icon for Adding New Item -->
          <a href="#" class="link icon-only" @click=${() => showPrompt()} style="font-size: 20px;">
            <i class="icon f7-icons">plus</i>
          </a>
        </div>
      </div>
    </div>

    <div class="page-content">
      <div class="block-title" style="margin-bottom: 16px; font-size: 18px; font-weight: 600;">My Projects</div>
      
      <div class="block block-strong inset" style="padding: 0;">
        <!-- The list will be rendered dynamically here -->
        <div class="list inset list-strong list-dividers-ios" style="padding: 0; margin: 0;">
          <ul id="dynamic-list" style="padding: 0; margin: 0; width: 100%;">
            <!-- Items will be injected here dynamically -->
          </ul>
        </div>
      </div>
    </div>

    <script>
      export default (props, { $f7, $, $on, $onMounted }) => {
        let listItems = JSON.parse(localStorage.getItem('listItems')) || [];

        // Show the prompt to add a new item
        const showPrompt = () => {
          $f7.dialog.prompt('Enter the title for the new item:', '', (value) => {
            if (value) {
              addItem(value);
            }
          });
        };

        // Add a new item to the list
        const addItem = (title) => {
          listItems.push({ title });
          localStorage.setItem('listItems', JSON.stringify(listItems));
          renderList();  // Immediately re-render the list without refreshing
        };

        // Render the list items dynamically
        const renderList = () => {
          const listElement = document.getElementById('dynamic-list');
          listElement.innerHTML = '';  // Clear the list before re-rendering

          listItems.forEach((item, index) => {
            const listItem = document.createElement('li');
            listItem.classList.add('item-content');
            listItem.style.padding = '8px 16px';  // Reduce padding to make it less "fat"
            listItem.style.margin = '4px 0';      // Reduce margin to make it more compact

            const listInner = document.createElement('div');
            listInner.classList.add('item-inner');

            const listTitle = document.createElement('div');
            listTitle.classList.add('item-title');
            listTitle.textContent = item.title;
            listTitle.style.fontSize = '14px';  // Optional: Make text slightly smaller
            listTitle.style.lineHeight = '1.5'; // Optional: Make the text more compact
            listTitle.addEventListener('click', () => showProjectDialog());  // Show the dialog on item click

            listInner.appendChild(listTitle);

            listItem.appendChild(listInner);
            listElement.appendChild(listItem);
          });
        };

        // Show the dialog to choose a project template
        const showProjectDialog = () => {
          $f7.dialog.alert(
            'Choose a template for your project:', 
            'Project Templates',
            () => {
              // Show the alert with the template options
              $f7.dialog.prompt('Choose a project type:', '', (value) => {
                if (value) {
                  openProjectPage(value);  // Open the page for the selected project type
                }
              });
            }
          );
        };

        // Open the new page with the selected project type
        const openProjectPage = (projectType) => {
          // Format the project name to create a new route (e.g., "Modern Application" -> "modern-application")
          const projectPage = projectType.toLowerCase().replace(/\s+/g, '-');
          $f7.views.main.router.navigate(`/project/${projectPage}`);  // Redirect to the new page
        };

        // Render the list when the page is initialized
        $on('pageInit', () => {
          renderList();  
        });

        return $render;
      };
    </script>
  </div>
</template>
