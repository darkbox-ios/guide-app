<template>
  <div class="page" data-name="product">
    <div class="navbar">
      <div class="navbar-bg"></div>
      <div class="navbar-inner sliding" style="display: flex; justify-content: space-between; align-items: center;">
        <div class="title">File Editor</div>
        <div class="right">
          <!-- Pencil Icon for Editing Mode -->
          <a href="#" class="link icon-only" @click="toggleEditMode" style="font-size: 20px;">
            <i class="icon f7-icons">pencil</i>
          </a>
          <!-- Plus Icon for Adding New Item -->
          <a href="#" class="link icon-only" @click="showPrompt" style="font-size: 20px;">
            <i class="icon f7-icons">plus</i>
          </a>
        </div>
      </div>
    </div>

    <div class="page-content">
      <div class="block-title" style="margin-bottom: 16px; font-size: 18px; font-weight: 600;">My Projects</div>
      
      <div class="block block-strong inset" style="padding: 0;">
        <!-- The list will be rendered dynamically here -->
        <div class="list inset list-strong list-dividers-ios" style="padding: 0; margin: 0;">
          <ul id="dynamic-list" style="padding: 0; margin: 0; width: 100%;">
            <!-- Items will be injected here dynamically -->
          </ul>
        </div>
      </div>
    </div>

    <script>
      export default {
        data() {
          return {
            isEditing: false,
            listItems: JSON.parse(localStorage.getItem('listItems')) || [],
            templates: [
              "Modern Application", "Modern Swift Application", "SwiftUI Application", "Control Center Module (11up)",
              "Framework", "Library", "Null", "Preference Bundle", "Swift Preference Bundle", "Theme", "Tool", 
              "Tool Swift", "Tweak", "Tweak Swift", "Tweak & simple preferences", "xpc service modern"
            ]
          };
        },
        methods: {
          // Toggle editing mode
          toggleEditMode() {
            this.isEditing = !this.isEditing;
            this.renderList();  // Re-render the list to show or hide delete buttons
          },

          // Show the prompt to add a new item
          showPrompt() {
            this.$f7.dialog.prompt('Enter the title for the new item:', '', (value) => {
              if (value) {
                this.addItem(value);
              }
            });
          },

          // Add a new item to the list
          addItem(title) {
            this.listItems.push({ title });
            localStorage.setItem('listItems', JSON.stringify(this.listItems));
            this.renderList();  // Immediately re-render the list without refreshing
          },

          // Delete an item from the list
          deleteItem(index) {
            this.listItems.splice(index, 1);
            localStorage.setItem('listItems', JSON.stringify(this.listItems));
            this.renderList();  // Immediately re-render the list without refreshing
          },

          // Show a dialog with template options when a project is clicked
          chooseTemplate(index) {
            // Show alert with options
            this.$f7.dialog.alert(
              `Choose a template for project "${this.listItems[index].title}"`,
              'Template Options',
              () => {
                // After choosing the template, do nothing
                // You can log the selected project title if needed, for now it just shows the alert
              }
            );
          },

          // Render the list items dynamically
          renderList() {
            const listElement = document.getElementById('dynamic-list');
            listElement.innerHTML = ''; // Clear the list before re-rendering

            this.listItems.forEach((item, index) => {
              const listItem = document.createElement('li');
              listItem.classList.add('item-content');
              listItem.style.padding = '8px 16px';  // Reduce padding to make it less "fat"
              listItem.style.margin = '4px 0';      // Reduce margin to make it more compact

              const listInner = document.createElement('div');
              listInner.classList.add('item-inner');

              const listTitle = document.createElement('div');
              listTitle.classList.add('item-title');
              listTitle.textContent = item.title;
              listTitle.style.fontSize = '14px';  // Optional: Make text slightly smaller
              listTitle.style.lineHeight = '1.5'; // Optional: Make the text more compact
              listTitle.addEventListener('click', () => this.chooseTemplate(index));  // Show template dialog on click

              listInner.appendChild(listTitle);

              if (this.isEditing) {
                const deleteButton = document.createElement('a');
                deleteButton.href = '#';
                deleteButton.classList.add('link', 'icon-only');
                deleteButton.innerHTML = '<i class="icon f7-icons">trash</i>';
                deleteButton.addEventListener('click', () => this.deleteItem(index));
                deleteButton.style.fontSize = '20px'; // Optional: Adjust the delete icon size
                listInner.appendChild(deleteButton);
              }

              listItem.appendChild(listInner);
              listElement.appendChild(listItem);
            });
          }
        },

        mounted() {
          this.renderList();  // Render the list when the page is initialized
        }
      };
    </script>
  </div>
</template>
