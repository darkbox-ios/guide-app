<template>
  <div class="page" data-name="product">
    <div class="navbar">
      <div class="navbar-bg"></div>
      <div class="navbar-inner sliding" style="display: flex; justify-content: space-between; align-items: center;">
        <div class="title">File Editor</div>
        <div class="right">
          <!-- Pencil Icon for Editing Mode -->
          <a href="#" class="link icon-only" @click=${() => toggleEditMode()} style="font-size: 20px;">
            <i class="icon f7-icons">pencil</i>
          </a>
          <!-- Plus Icon for Adding New Item -->
          <a href="#" class="link icon-only" @click=${() => showPrompt()} style="font-size: 20px;">
            <i class="icon f7-icons">plus</i>
          </a>
        </div>
      </div>
    </div>

    <div class="page-content">
      <div class="block-title" style="margin-bottom: 16px; font-size: 18px; font-weight: 600;">My Projects</div>
      
      <div class="block block-strong inset" style="padding: 0;">
        <!-- The list will be rendered dynamically here -->
        <div class="list inset list-strong list-dividers-ios" style="padding: 0; margin: 0;">
          <ul id="dynamic-list" style="padding: 0; margin: 0; width: 100%;">
            <!-- Items will be injected here dynamically -->
          </ul>
        </div>
      </div>
    </div>

    <script>
      export default (props, { $f7, $, $on, $onMounted, $update }) => {
        let isEditing = false;
        let listItems = JSON.parse(localStorage.getItem('listItems')) || [];

        // Toggle editing mode
        const toggleEditMode = () => {
          isEditing = !isEditing;
          renderList();  // Re-render the list to show or hide delete buttons
        };

        // Show the prompt to add a new item
        const showPrompt = () => {
          $f7.dialog.prompt('Enter the title for the new item:', '', (value) => {
            if (value) {
              addItem(value);
            }
          });
        };

        // Add a new item to the list
        const addItem = (title) => {
          listItems.push({ title });
          localStorage.setItem('listItems', JSON.stringify(listItems));
          renderList();  // Immediately re-render the list without refreshing
        };

        // Delete an item from the list
        const deleteItem = (index) => {
          listItems.splice(index, 1);
          localStorage.setItem('listItems', JSON.stringify(listItems));
          renderList();  // Immediately re-render the list without refreshing
        };

        // Initialize Project Picker
        const initializeProject = () => {
          $f7.picker.create({
            inputEl: '#project-picker',
            cols: [
              {
                textAlign: 'center',
                values: [
                  'Modern Application', 'Modern Swift Application', 'SwiftUI Application', 'Control Center Module (11up)', 
                  'Framework', 'Library', 'Null', 'Preference Bundle', 'Swift Preference Bundle', 'Theme', 
                  'Tool', 'Tool Swift', 'Tweak', 'Tweak Swift', 'Tweak & simple preferences', 'xpc service modern'
                ]
              }
            ],
            on: {
              change: function(picker, values) {
                const selectedProject = values[0];
                openProjectPage(selectedProject);  // Open a page with the selected project
              }
            }
          }).open();
        };

        // Open a new page with the selected project
        const openProjectPage = (projectType) => {
          // Assuming you have a page template for each project type
          const newPageUrl = `/project/${projectType.toLowerCase().replace(/\s+/g, '-')}`;  // Customize this URL structure as needed
          $f7.views.main.router.navigate(newPageUrl);
        };

        // Render the list items dynamically
        const renderList = () => {
          const listElement = document.getElementById('dynamic-list');
          listElement.innerHTML = '';  // Clear the list before re-rendering

          listItems.forEach((item, index) => {
            const listItem = document.createElement('li');
            listItem.classList.add('item-content');
            listItem.style.padding = '8px 16px';  // Reduce padding to make it less "fat"
            listItem.style.margin = '4px 0';      // Reduce margin to make it more compact

            const listInner = document.createElement('div');
            listInner.classList.add('item-inner');

            const listTitle = document.createElement('div');
            listTitle.classList.add('item-title');
            listTitle.textContent = item.title;
            listTitle.style.fontSize = '14px';  // Optional: Make text slightly smaller
            listTitle.style.lineHeight = '1.5'; // Optional: Make the text more compact
            listTitle.addEventListener('click', initializeProject);  // Show the picker on item click

            listInner.appendChild(listTitle);

            if (isEditing) {
              const deleteButton = document.createElement('a');
              deleteButton.href = '#';
              deleteButton.classList.add('link', 'icon-only');
              deleteButton.innerHTML = '<i class="icon f7-icons">trash</i>';
              deleteButton.addEventListener('click', () => deleteItem(index));
              deleteButton.style.fontSize = '20px'; // Optional: Adjust the delete icon size
              listInner.appendChild(deleteButton);
            }

            listItem.appendChild(listInner);
            listElement.appendChild(listItem);
          });
        };

        $on('pageInit', () => {
          renderList();  // Render the list when the page is initialized
        });

        return $render;
      };
    </script>
  </div>
</template>
